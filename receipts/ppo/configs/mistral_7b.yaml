# Config for single device RLHF (Q)LoRA PPO finetuning of Mistral 7B model.
#
# This config uses hyperparameters based on small set of experiments and information
# available from existing implementations.
#
# This config assumes that you've run the following commands before launching
# this run: (take a look what prefix is down the config)
# 1. Download a reward model
#   a. (deprecated) tune download weqweasdas/RM-Mistral-7B --output-dir ${prefix}/models/RM-Mistral-7B/
#   b. tune download RLHF-And-Friends/RM-TLDR-Mistral-7B-v0.2 --output-dir ${prefix}/models/Mistral-7B-RM/
# 2. Get Mistral-7B model
#   a. (Base) tune download mistral-community/Mistral-7B-v0.2 --output-dir ${prefix}/models/Mistral-7B-Base/
#   b. (Instruct) tune download mistralai/Mistral-7B-Instruct-v0.2 --output-dir ${prefix}/models/Mistral-7B-Instruct/
#   c. (SFT) tune download RLHF-And-Friends/SFT-TLDR-Mistral-7B-v0.2 --output-dir ~/.torchtune/models/Mistral-7B-SFT/
#   d. (SmallSFT) tune download RLHF-And-Friends/TLDR-Mistral-7B-SmallSFT --output-dir ~/.torchtune/models/Mistral-7B-SmallSFT/
#
# You'll also need to ensure that {output_dir} exists beforehand, as checkpoints for policy and
# value models as well as WandBLogger logs are saved in sub-folders.
#
# To launch on N devices (starting from 1), run the following command from repo root:
#   tune run receipts/ppo.py --nproc_per_node N --config configs/mistral_7b.yaml
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run receipts/ppo.py --nproc_per_node N --config configs/mistral_7b.yaml checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#

# NOTE: Use full paths only. '~' would not expand.
# NOTE: Do not override from CLI variables other variables depend on. The dependants would not be
# updated.


# Change those to your preference. Do not do that via CLI!
# prefix: /home/optteam/.torchtune
prefix: /home/arqa39/.torchtune

project: TLDR
group: Base-PPO
model: Mistral-7B-Base # | Mistral-7B-SmallSFT |  Mistral-7B-SFT | Mistral-7B-Base | Mistral-7B-Instruct
reward: Mistral-7B-RM
run: PPO-Refactoring-Test

output_dir: ${prefix}/checkpoints/${project}/${group}/${model}-${run}

# Tokenizer
tokenizer:
  _component_: torchtune.models.mistral.mistral_tokenizer
  path: ${prefix}/models/${model}/tokenizer.model
  max_seq_len: 2500

# Dataset
dataset:
  _component_: torchtune.datasets.text_completion_dataset
  # source: RLHF-And-Friends/tldr-ppo
  source: trl-lib/tldr
  split: train
  column: prompt
  add_eos: False

# Policy / Reference Policy when adapter disabled
policy:
  _component_: torchtune.models.mistral.lora_mistral_7b
  # (Q)LoRA
  lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 64  # higher increases accuracy and memory
  lora_alpha: 16  # usually alpha=2*rank
  lora_dropout: 0.0
  quantize_base: False # stands for 'Q' in QLoRA

# Value Model / Reward Model when adapter disabled
valmod:
  _component_: torchtune.models.mistral.lora_mistral_reward_7b
  # (Q)LoRA
  lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: = True
  lora_rank: 16
  lora_alpha: 32
  lora_dropout: 0.0
  quantize_base: False

# main checkpointer is for the policy model
checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${prefix}/models/${model}/
  checkpoint_files:
    [
      "model-00001-of-00003.safetensors",
      "model-00002-of-00003.safetensors",
      "model-00003-of-00003.safetensors",
    ]
  # this is the only place where you should update `recipe_checkpoint` if resuming training
  recipe_checkpoint: null
  output_dir: ${output_dir}/policy
  model_type: MISTRAL

# checkpointer for the value model initialized with the reward model weights
value_checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${prefix}/models/${reward}/
  checkpoint_files:
    [
      "model-00001-of-00003.safetensors",
      "model-00002-of-00003.safetensors",
      "model-00003-of-00003.safetensors",
    ]
  output_dir: ${output_dir}/value
  model_type: REWARD

seed: 0xD1CE
shuffle: True

# Training arguments
batch_size: 64
num_steps: 10000
ppo_epochs: 2
ppo_batch_size: 32
gradient_accumulation_steps: 4 # Use to increase effective batch size

# Memory management and performance
optimizer:
  _component_: bitsandbytes.optim.PagedAdamW
  lr: 1e-4
enable_activation_checkpointing: True # True reduces memory
dtype: bf16 # | fp32 | fp16 is not supported

# batch size for forward pass during generation
forward_batch_size: 8
max_generated_tokens: 58
temperature: 0.7
top_k: null

# parameter for penalising generations shorter than `min_response_length`
min_response_length: 18
# parameter for penalising generations without a stop token
penalise_no_eos: True
# scalar penalty to apply when penalising
reward_penalty: -3

whiten_rewards: False

# GAE hyperparameters
gamma: 1
lmbda: 0.95

# PPO hyperparameters
loss:
  _component_: torchtune.rlhf.loss.PPOLoss
  epsilon: 0.2
  value_coeff: 0.1
  value_clip_range: 0.2

# KL-Penalty parameters
kl:
  # coefficient for in-reward KL-Penalty
  reward_coeff: 0.01
  # coefficient for direct KL-Penalty
  direct_coeff: 0.00
  # Regulates probability mass given to self-reference acc. to formula
  # ref = self_attraction * self_ref + (1 - self_attraction) * others_ref.mean()
  # Needed in cooperative setup
  self_attraction: null

# Logging
wandb_logger:
  dir: ${prefix}
  entity: RADFAN
  project: ${project}
  group: ${group}
  name: ${model}-${run}

log_every_n_steps: 1
update_ref_policy_every_n_steps: 13
