# Config for single device RLHF (Q)LoRA PPO finetuning of Llama3.1-8B model.
#
# This config uses hyperparameters based on small set of experiments and information
# available from existing implementations.
#
# This config assumes that you've run the following commands before launching
# this run: (take a look what prefix is down the config)
# Download the policy model
#   a. (Base) tune download meta-llama/Llama-3.1-8B --output-dir ~/.tune/models/Llama-3.1-8B-Base/ --ignore-patterns "original/consolidated.00.pth"
#   b. (Instruct) tune download meta-llama/Llama-3.1-8B-Instruct --output-dir ~/.tune/models/Llama-3.1-8B-Instruct/ --ignore-patterns "original/consolidated.00.pth"
#
# You'll also need to ensure that {output_dir} exists beforehand, as checkpoints for policy and
# value models as well as WandBLogger logs are saved in sub-folders.
#
# To launch on N devices (starting from 1), run the following command from repo root:
#   tune run --nproc_per_node N receipts/ppo/ppo.py --config receipts/ppo/configs/gsm8k_llama_3.1_8b_ppo.yaml
#
# NOTE: Do not override from CLI variables other variables depend on. The dependants would not be
# updated.


prefix: ~/.tune

project: GSM8K
# group: Llama-3.1-8B-Instruct-GRPO
# model: Llama-3.1-8B-Instruct
group: Llama-3.1-8B-Base-GRPO
model: Llama-3.1-8B-Base
run: GRPO

output_dir: ${prefix}/checkpoints/${project}/${group}/${model}-${run}

# Tokenizer
tokenizer:
  _component_: ppotune.tokenizers.llama3_tokenizer
  # eos_token: <|eot_id|> # for chat model
  eos_token: <|end_of_text|> # for base model
  path: ${prefix}/models/${model}/original/tokenizer.model
  max_seq_len: 2500

# Dataset
dataset:
  # _component_: ppotune.datasets.chat_gsm8k_dataset
  _component_: ppotune.datasets.plain_gsm8k_dataset
  split: train

# evaluation_dataset:
#   _component_: ppotune.datasets.plain_gsm8k_dataset
#   split: test

# # Evaluator
# evaluator:
#   _component_: ppotune.evaluation.gsm8k_evaluator
#   arbiter:
#     _component_: ppotune.arbiters.gsm8k_arbiter
#     base_url: https://api.deepinfra.com/v1/openai
#     model: meta-llama/Llama-3.3-70B-Instruct-Turbo
#   num_samples: 128 # better be divisible by forward_batch_size
#   every_n_steps: 1
#   seed: 0xD1CE

# Batch parameters
batch_size: 64
group_size: 8 # needed in GRPO. just leave it as is.
num_steps: 10000
ppo_epochs: 2
ppo_batch_size: 32
gradient_accumulation_steps: 4 # Use to increase effective batch size
forward_batch_size: 8

# Policy / Reference Policy when adapter disabled
policy:
  _component_: ppotune.model.GenerativeLoRAModel
  generation_batch_size: ${forward_batch_size}
  max_response_len: 250
  temperature: 0.7
  top_k: null
  model:
    _component_: torchtune.models.llama3_1.lora_llama3_1_8b
    # (Q)LoRA
    lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj']
    apply_lora_to_mlp: True
    apply_lora_to_output: False
    lora_rank: 64  # higher increases accuracy and memory
    lora_alpha: 16  # usually alpha=2*rank
    lora_dropout: 0.0
    quantize_base: False # stands for 'Q' in QLoRA
  ckpt:
    _component_: torchtune.training.FullModelHFCheckpointer
    checkpoint_dir: ${prefix}/models/${model}/
    checkpoint_files:
      [
        "model-00001-of-00004.safetensors",
        "model-00002-of-00004.safetensors",
        "model-00003-of-00004.safetensors",
        "model-00004-of-00004.safetensors"
      ]
    # this is the only place where you should update `recipe_checkpoint` if resuming training
    recipe_checkpoint: null
    output_dir: ${output_dir}/policy
    model_type: LLAMA3

advantage:
  _component_: ppotune.advantage.GRAE
  group_size: ${group_size}
  reward:
    _component_: ppotune.reward.DeepSeekMathRewardModel

seed: 0xD1CE
shuffle: True

# reduces training performance but helps a lot with CUDA OOMs and invalid
# memory access errors in tight memoty setup
empty_cache_after_generation: True

optimizer:
  _component_: bitsandbytes.optim.PagedAdamW
  lr: 1e-4

dtype: bf16 # | fp32 | fp16 is not supported

sampler:
  _component_: ppotune.sample.StickyDistributedSampler
  num_duplicates: ${group_size}

kl_penalty:
  _component_: ppotune.loss.KLPenalty
  coeff: 0.1

kl_scheduler:
  _component_: ppotune.schedulers.linear_scheduler
  initial_value: ${kl_penalty.coeff}
  final_value: ${kl_penalty.coeff}

# Regulates probability mass given to self-reference acc. to formula
# ref = self_preference * self_ref + (1 - self_preference) * others_ref.mean()
# Needed in cooperative setup. In single-agent setup set to null
self_preference: 0.8
# Regulates temperature in `softmax` when obtaining weights for reweighting
# policies in KL term
weighting_temp: 5

# PPO Loss
# clipping hyperparameter
epsilon: 0.2

# Logging
wandb_logger:
  dir: ${prefix}
  entity: RADFAN
  project: ${project}
  group: ${group}
  name: ${model}-${run}

log_every_n_steps: 1
update_ref_policy_every_n_steps: 13
